import telebot
from telebot import types, TeleBot
from dotenv import load_dotenv
import os
import time
import threading
from datetime import datetime, timezone, timedelta, tzinfo
from notion_integration import (create_page, show_people_names, show_existing_events,
                                find_page_id_by_name, delete_page, update_page)
import pytz
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = TeleBot(TELEGRAM_TOKEN)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏
user_data = {}

@bot.message_handler(commands=['start'])
def start(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    add_event_btn = types.KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –ø–æ–¥—ñ—é")
    show_events_btn = types.KeyboardButton("üóí –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–¥—ñ—ó")
    update_btn = types.KeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–¥—ñ—é")
    delete_btn = types.KeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–¥—ñ—é")
    show_people_btn = types.KeyboardButton("üë• –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–∞ –Ω–∞–∑–≤–∏ –ø–æ–¥—ñ–π")
    calendar_btn = types.KeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä –ø–æ–¥—ñ–π")
    keyboard.add(add_event_btn, show_events_btn, update_btn, delete_btn, show_people_btn, calendar_btn)
    bot.send_message(message.chat.id, "–í–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä! –í–∏–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –∑ –ø–µ—Ä–µ–ª—ñ–∫—É.", reply_markup=keyboard)


# –û–ë–†–û–ë–ö–ê –°–¢–í–û–†–ï–ù–ù–Ø –ù–û–í–û–á –ü–û–î–Ü–á, –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –ø–æ–¥—ñ—é")
def add_new_event(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è/–Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å '–≤—ñ–¥–º—ñ–Ω–∞':")

    def name_or_cancel_step(name_message):
        if name_message.text.lower() == "–≤—ñ–¥–º—ñ–Ω–∞":
            # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ "–≤—ñ–¥–º—ñ–Ω–∞", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–º–µ–Ω—É
            bot.send_message(message.chat.id, "–í—ñ–¥–º—ñ–Ω—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")
            start(name_message)
        # TODO —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–æ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –Ω–∞–∑–≤–∏ —É –±–∞–∑—ñ
        # elif name_message.text.lower() in show_people_names():
        #     markup = types.InlineKeyboardMarkup()
        #     markup.add(types.InlineKeyboardButton("–û–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á–µ", callback_data=f"update_{name_message}"))
        #     markup.add(types.InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –Ω–∞–∑–≤—É", callback_data="new_name"))
        #     bot.send_message(
        #         message.chat.id,
        #         f"–ü–æ–¥—ñ—è –∑ –Ω–∞–∑–≤–æ—é '{name_message}' –≤–∂–µ —ñ—Å–Ω—É—î. –í–∏ —Ö–æ—á–µ—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —ó—ó –∞–±–æ –≤–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –Ω–∞–∑–≤—É?",
        #         reply_markup=markup
        else:
            # –ü–µ—Ä–µ–¥–∞—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ process_name_step –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            process_name_step(name_message)
    bot.register_next_step_handler(msg, name_or_cancel_step)

def process_name_step(message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∏–º—è/–Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É user_data
    user_data["–Ü–º'—è/–Ω–∞–∑–≤–∞"] = {"title": [{"text": {"content": message.text}}]}
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ‚Äî –≤–≤–æ–¥ –¥–∞—Ç—ã
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ DD-MM-YYYY:")
    bot.register_next_step_handler(msg, process_date_step)


def process_date_step(message):
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è 08:00
    """
    Notion –≥–ª—é—á–∏—Ç –∏–∑-–∑–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –í—Ä–µ–º—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤ GMT 0,
    –∞ –ø–æ –ö–∏–µ–≤—É GMT+2. –í—ã—Ö–æ–¥–∏—Ç, —á—Ç–æ –≤—Ä–µ–º—è —Å—Ç–∞–≤–∏—Ç—å—Å—è –Ω–∞ 2 —á–∞—Å–∞ —Ä–∞–Ω—å—à–µ.
    –ü—É—Å–∫–∞–π –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –ö–∏–µ–≤—É.
    """
    try:
        date = datetime.strptime(message.text, '%d-%m-%Y')
        # date_needed = date.replace(hour=8, minute=0).astimezone(timezone.utc).isoformat()
        date_needed = get_kiev_time(date)
        user_data["–î–∞—Ç–∞"] = {"date": {"start": date_needed, "end": None, "time_zone": "Europe/Kiev"}}
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:")
        bot.register_next_step_handler(msg, process_greeting_text_step)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(msg, process_date_step)


def process_greeting_text_step(message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É user_data
    user_data["–¢–µ–∫—Å—Ç –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è"] = {"rich_text": [{"text": {"content": message.text}}]}
    # –ü–µ—Ä–µ–¥–∞—ë–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    create_page(user_data)

    bot.send_message(message.chat.id, "–ü–æ–¥—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ! –ó–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö Notion.")


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ 8:00 –ø–æ –ö–∏–µ–≤—É –¥–ª—è process_date_step
def get_kiev_time(date):
    kiev_tz = pytz.timezone('Europe/Kiev')
    date = kiev_tz.localize(date.replace(hour=10, minute=0))  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 8:00 –ø–æ –∫–∏–µ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    return date.astimezone(pytz.utc).isoformat()  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ UTC –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Notion


# TODO –°–¥–µ–ª–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫—É, –∞ –ø–æ—Ç–æ–º –≤—ã–≥—Ä—É–∑–∫–∏ –µ–≥–æ –≤ –±–∞–∑—É.


# –û–ë–†–û–ë–ö–ê –§–£–ù–ö–¶–Ü–á –ü–û–ö–ê–ó–ê–¢–ò –Ü–ú–ï–ù–ê –ü–û–î–Ü–ô
@bot.message_handler(func=lambda message: message.text == "üë• –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–º–µ–Ω–∞ —Ç–∞ –Ω–∞–∑–≤–∏ —Å–≤—è—Ç")
def show_people(message):
    bot.send_message(message.chat.id, f"–Ü–º–µ–Ω–∞ —Ç–∞ –Ω–∞–∑–≤–∏ —Å–≤—è—Ç, –Ω–∞—è–≤–Ω—ñ –≤ –±–∞–∑—ñ:\n{show_people_names()}")
    bot.send_message(message.chat.id, "–ë–∞–∂–∞—î—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ–¥—ñ–π, –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –ø–æ–¥—ñ—é –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ –Ω–∞—è–≤–Ω—É?\n"
                                      "–í–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ –∑–∞ –∫–Ω–æ–ø–∫–∞–º–∏ 'üìÖ –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–¥—ñ—ó', '‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –ø–æ–¥—ñ—é', "
                                      "'üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–¥—ñ—é'.")


# –û–ë–†–û–ë–ö–ê –§–£–ù–ö–¶–Ü–á –ü–û–ö–ê–ó–ê–¢–ò –ü–û–î–Ü–á
@bot.message_handler(func=lambda message: message.text == "üóí –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–¥—ñ—ó")
def show_events(message):
    events = show_existing_events()
    if isinstance(events, str):  # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∞—Å—å –æ—à–∏–±–∫–∞
        bot.send_message(message.chat.id, events)
        return bot.send_message(message.chat.id, events)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Å–æ–±—ã—Ç–∏–∏
    output = []
    for details in events.values():
        event_info = (
            f"–Ü–º'—è/–Ω–∞–∑–≤–∞: {details['–Ü–º\'—è/–Ω–∞–∑–≤–∞']}\n"
            f"–î–∞—Ç–∞: {details['–î–∞—Ç–∞']}\n"
            f"–¢–µ–∫—Å—Ç –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è: {details['–¢–µ–∫—Å—Ç –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è']}\n"
        )
        output.append(event_info)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—ë –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç –∏ –≤—ã–≤–æ–¥–∏–º
    final_output = "\n".join(output)
    bot.send_message(message.chat.id, f"–Ü–º–µ–Ω–∞ —Ç–∞ –Ω–∞–∑–≤–∏ –ø–æ–¥—ñ–π, –Ω–∞—è–≤–Ω—ñ –≤ –±–∞–∑—ñ:\n\n{final_output}")


# –û–ë–†–û–ë–ö–ê –§–£–ù–ö–¶–Ü–á –í–ò–î–ê–õ–ò–¢–ò –ü–û–î–Ü–Æ
@bot.message_handler(func=lambda message: message.text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–¥—ñ—é")
def delete_event_handler(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è/–Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å '–≤—ñ–¥–º—ñ–Ω–∞':")
    bot.register_next_step_handler(msg, handle_delete_name)


def handle_delete_name(name_message):
    name = name_message.text.strip()

    if name.lower() == "–≤—ñ–¥–º—ñ–Ω–∞":
        bot.send_message(name_message.chat.id, "–í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        start(name_message)  # –í–µ—Ä–Ω—É—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        return

    # –ò—â–µ–º ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    page_id = find_page_id_by_name(name)
    if page_id:
        delete_page(page_id, name_message)
        bot.send_message(name_message.chat.id, "–ü–æ–¥—ñ—é —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏!")
        start(name_message)
    else:
        bot.send_message(name_message.chat.id, "–ü–æ–¥—ñ—è –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")


#  –û–ë–†–û–ë–ö–ê –§–£–ù–ö–¶–Ü–á –û–ù–û–í–ò–¢–ò –ü–û–î–Ü–Æ
@bot.message_handler(func=lambda message: message.text == "üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–¥—ñ—é")
def start_update_event(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è/–Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó, —è–∫—É —Ö–æ—á–µ—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏, –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å '–≤—ñ–¥–º—ñ–Ω–∞':")
    bot.register_next_step_handler(msg, process_event_name_for_update)

bot_data = {}

def process_event_name_for_update(message):
    if message.text.lower() == "–≤—ñ–¥–º—ñ–Ω–∞":
        bot.send_message(message.chat.id, "–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        start(message)
        return

    event_name = message.text
    page_id = find_page_id_by_name(event_name)

    if not page_id:
        bot.send_message(message.chat.id, "–ü–æ–¥—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤—É —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ page_id –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    bot_data[message.chat.id] = {"page_id": page_id, "event_name": event_name}

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("–û–Ω–æ–≤–∏—Ç–∏ —ñ–º'—è/–Ω–∞–∑–≤—É", callback_data="update_name"),
        InlineKeyboardButton("–û–Ω–æ–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç", callback_data="update_text"),
        InlineKeyboardButton("–û–Ω–æ–≤–∏—Ç–∏ –¥–∞—Ç—É –ø–æ–¥—ñ—ó", callback_data="update_date")
    )
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("update_"))
def handle_update_selection(call):
    chat_id = call.message.chat.id
    action = call.data
    page_id = bot_data[chat_id]["page_id"]

    if action == "update_name":
        msg = bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è/–Ω–∞–∑–≤—É:")
        bot.register_next_step_handler(msg, lambda m: update_single_field(m, page_id, "–Ü–º'—è/–Ω–∞–∑–≤–∞"))

    elif action == "update_text":
        msg = bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –ø–æ–¥—ñ—ó:")
        bot.register_next_step_handler(msg, lambda m: update_single_field(m, page_id, "–¢–µ–∫—Å—Ç –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è"))

    elif action == "update_date":
        msg = bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYY-MM-DD:")
        bot.register_next_step_handler(msg, lambda m: update_single_field(m, page_id, "–î–∞—Ç–∞"))


def update_single_field(message, page_id, field):
    new_value = message.text
    updated_data = {}

    if field == "–Ü–º'—è/–Ω–∞–∑–≤–∞":
        updated_data[field] = {"title": [{"text": {"content": new_value}}]}
    elif field == "–¢–µ–∫—Å—Ç –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è":
        updated_data[field] = {"rich_text": [{"text": {"content": new_value}}]}
    elif field == "–î–∞—Ç–∞":
        updated_data[field] = {"date": {"start": new_value}}

    result = update_page(page_id, updated_data)
    bot.send_message(message.chat.id, result)


@bot.message_handler(func=lambda message: message.text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä –ø–æ–¥—ñ–π")
def handle_calendar_events(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤–∏ –ø–æ–¥—ñ–π —á–µ—Ä–µ–∑ –∫–æ–º—É, –¥–ª—è —è–∫–∏—Ö –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è/–ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è.")
    bot.register_next_step_handler(msg, process_event_names, message.chat.id)

def process_event_names(message, chat_id):
    event_names = [name.strip() for name in message.text.split(",")]
    events_dict = show_existing_events()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –µ—Å—Ç—å –≤ –ë–î
    selected_events = [event for event in events_dict.values() if event["–Ü–º'—è/–Ω–∞–∑–≤–∞"] in event_names]
    if not selected_events:
        bot.send_message(chat_id, "–ñ–æ–¥–Ω–æ—ó –∑ –≤–≤–µ–¥–µ–Ω–∏—Ö –ø–æ–¥—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º chat_id –∫ –∫–∞–∂–¥–æ–º—É —Å–æ–±—ã—Ç–∏—é –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
    for event in selected_events:
        event["chat_id"] = chat_id

    setup_greeting_timers(selected_events)
    bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è/–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–∏–±—Ä–∞–Ω–∏—Ö –ø–æ–¥—ñ–π –±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ —É –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π —á–∞—Å.")

# –ü–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
def send_greeting(event):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –ë–î."""
    chat_id = event.get('chat_id')
    greeting_text = event.get("–¢–µ–∫—Å—Ç –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è")
    event_name = event.get("–Ü–º'—è/–Ω–∞–∑–≤–∞")
    event_time = event.get("–î–∞—Ç–∞")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
    bot.send_message(chat_id, f"{event_name}:\n{greeting_text}")

    # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –ë–î
    page_id = event.get("page_id")
    if page_id:
        delete_page(page_id, message=chat_id)  # –ø–µ—Ä–µ–¥–∞–µ–º chat_id –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä


def check_events(events):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
    while events:
        current_time = datetime.now().astimezone()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

        for event in events[:]:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            event_time_str = event["–î–∞—Ç–∞"]
            try:
                event_time = datetime.fromisoformat(event_time_str)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ datetime —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
            except ValueError:
                bot.send_message(events.chat.id, f"–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event['–Ü–º\'—è/–Ω–∞–∑–≤–∞']}")
                continue

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}, –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è: {event_time}")

            if event_time <= current_time:
                send_greeting(event)
                events.remove(event)  # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                print(f"–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–±—ã—Ç–∏—è: {event['–Ü–º\'—è/–Ω–∞–∑–≤–∞']}")

        time.sleep(10)


def setup_greeting_timers(events):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã."""
    greeting_thread = threading.Thread(target=check_events, args=(events,))
    greeting_thread.daemon = True
    greeting_thread.start()


bot.polling()


